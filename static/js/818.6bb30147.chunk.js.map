{"version":3,"file":"static/js/818.6bb30147.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,GAAAA,GAAH,yVAcJC,EAAiBD,EAAAA,GAAAA,IAAH,sDAIdE,EAAYF,EAAAA,GAAAA,EAAH,kF,SCjBTG,EAAW,SAAC,GAAkD,IAAD,IAA/CC,MAASC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,UACtD,OACE,UAACR,EAAD,WACGM,GACC,gBAAKG,IAAG,UANO,oCAMP,OAAsBH,GAAgBI,IAAKH,IAEnD,aAGF,UAACL,EAAD,YACE,SAACC,EAAD,UAAYI,KACZ,UAACJ,EAAD,yBAAuBK,UAI9B,EChBYG,EAAOV,EAAAA,GAAAA,GAAH,8RCAJW,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAACF,EAAD,UACGE,GAAQA,EAAKC,KAAI,SAAAT,GAAK,OAAI,SAACD,EAAD,CAAyBC,MAAOA,GAAjBA,EAAMU,GAAzB,KAG5B,ECeD,EAlBa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOH,EAAP,KAAaI,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACR,IAAK,IACYC,EADb,mCACF,uGACyBC,EAAAA,EAAAA,GAAUJ,GADnC,gBACUK,EADV,EACUA,KACRN,EAAQM,EAAKV,MAFf,2CADE,qDAKFQ,GAGD,CAFC,MAAOG,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACN,KACG,SAACN,EAAD,CAAUC,KAAMA,GACxB,C,kMCnBKc,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,iFACpBF,EAAAA,EAAAA,IAAU,sBAAuB,CAC5CG,OAAQ,CACNC,QAASL,EACTG,KAAAA,KAJ6B,mFAAH,sDASnBG,EAAc,mCAAG,WAAMf,GAAN,iFACfU,EAAAA,EAAAA,IAAA,gBAAmBV,GAAW,CACzCa,OAAQ,CACNC,QAASL,EACTO,mBAAoB,YAJI,mFAAH,sDASdZ,EAAS,mCAAG,WAAMJ,GAAN,iFACVU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,YAAsC,CACjDa,OAAQ,CACNC,QAASL,KAHU,mFAAH,sDAQTQ,EAAiB,mCAAG,WAAMjB,GAAN,iFAClBU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,YAAsC,CACjDa,OAAQ,CACNC,QAASL,KAHkB,mFAAH,sDAQjBS,EAAuB,mCAAG,WAAOC,EAAOP,GAAd,iFACxBF,EAAAA,EAAAA,IAAU,eAAgB,CACrCG,OAAQ,CACNC,QAASL,EACTU,MAAAA,EACAP,KAAAA,KALiC,mFAAH,uD","sources":["components/Castitem/CastItem.styled.js","components/Castitem/CastItem.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx","services/requestsForMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(255, 255, 255, 0.2),\n    0px 1px 1px 0px rgba(255, 255, 255, 0.14),\n    0px 2px 1px -1px rgba(255, 255, 255, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const DescriptionBox = styled.div`\n  padding: 20px 0 20px 10px;\n`;\n\nexport const Paragraph = styled.p`\n  font-size: 15px;\n  font-weight: 500;\n  color: white;\n`;\n","import { Item, DescriptionBox, Paragraph } from './CastItem.styled';\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/w500/';\n\nexport const CastItem = ({ actor: { profile_path, name, character } }) => {\n  return (\n    <Item>\n      {profile_path ? (\n        <img src={`${BASE_URL_IMAGE}${profile_path}`} alt={name} />\n      ) : (\n        'Not Photo'\n      )}\n\n      <DescriptionBox>\n        <Paragraph>{name}</Paragraph>\n        <Paragraph>Character: {character}</Paragraph>\n      </DescriptionBox>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { CastItem } from 'components/Castitem/CastItem';\nimport { List } from './CastList.styled';\nexport const CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast && cast.map(actor => <CastItem key={actor.id} actor={actor} />)}\n    </List>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/requestsForMovies';\nimport { CastList } from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      async function fetch() {\n        const { data } = await fetchCast(movieId);\n        setCast(data.cast);\n      }\n      fetch();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n  return <CastList cast={cast} />;\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '4f349eaa26ab680508bb40abbe6da2af';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrandingMovies = async page => {\n  return await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieById = async movieId => {\n  return await axios.get(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n};\n\nexport const fetchCast = async movieId => {\n  return await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = async movieId => {\n  return await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieBySearchQuery = async (query, page) => {\n  return await axios.get('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n};\n"],"names":["Item","styled","DescriptionBox","Paragraph","CastItem","actor","profile_path","name","character","src","alt","List","CastList","cast","map","id","useState","setCast","movieId","useParams","useEffect","fetch","fetchCast","data","error","console","log","API_KEY","axios","fetchTrandingMovies","page","params","api_key","fetchMovieById","append_to_response","fetchMovieReviews","fetchMovieBySearchQuery","query"],"sourceRoot":""}